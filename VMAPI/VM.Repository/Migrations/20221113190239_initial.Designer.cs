// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VM.Repository;

#nullable disable

namespace VM.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221113190239_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VM.Domain.Models.Coffee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coffees");
                });

            modelBuilder.Entity("VM.Domain.Models.CoffeeToIngredient", b =>
                {
                    b.Property<Guid>("CoffeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CoffeeId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("CoffeeToIngredient");
                });

            modelBuilder.Entity("VM.Domain.Models.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LeftInStock")
                        .HasColumnType("int");

                    b.Property<Guid>("MeasurementUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("VM.Domain.Models.MeasurementUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MeasurementUnits");
                });

            modelBuilder.Entity("VM.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoffeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("VM.Domain.Models.OrderToIngredient", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("OrderToIngredient");
                });

            modelBuilder.Entity("VM.Domain.Models.CoffeeToIngredient", b =>
                {
                    b.HasOne("VM.Domain.Models.Coffee", "Coffee")
                        .WithMany("Ingredients")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VM.Domain.Models.Ingredient", "Ingredient")
                        .WithMany("Coffees")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coffee");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("VM.Domain.Models.Ingredient", b =>
                {
                    b.HasOne("VM.Domain.Models.MeasurementUnit", "MeasurementUnit")
                        .WithMany("Ingredients")
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeasurementUnit");
                });

            modelBuilder.Entity("VM.Domain.Models.Order", b =>
                {
                    b.HasOne("VM.Domain.Models.Coffee", "Coffee")
                        .WithMany("Orders")
                        .HasForeignKey("CoffeeId");

                    b.Navigation("Coffee");
                });

            modelBuilder.Entity("VM.Domain.Models.OrderToIngredient", b =>
                {
                    b.HasOne("VM.Domain.Models.Ingredient", "Ingredient")
                        .WithMany("Orders")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VM.Domain.Models.Order", "Order")
                        .WithMany("Ingredients")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("VM.Domain.Models.Coffee", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("VM.Domain.Models.Ingredient", b =>
                {
                    b.Navigation("Coffees");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("VM.Domain.Models.MeasurementUnit", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("VM.Domain.Models.Order", b =>
                {
                    b.Navigation("Ingredients");
                });
#pragma warning restore 612, 618
        }
    }
}
